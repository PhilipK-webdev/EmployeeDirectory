{"version":3,"sources":["component/Employee/Employee.js","component/Form/Form.js","App.js","serviceWorker.js","index.js"],"names":["Employee","employee","className","scope","map","element","index","key","first","last","email","gender","Form","modifyName","submitName","showAll","type","placeholder","onChange","id","onClick","App","useState","name","setName","setEmployee","allEmployees","setALlEmployees","useEffect","tableData","arrayAll","jsonData","results","slice","e","target","value","filteredEmp","length","toLowerCase","startsWith","push","preventDefault","sort","a","b","newTemp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"o8oNAiCeA,EAhCE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OACI,yBAAKC,UAAU,aACX,2BAAOA,UAAU,qCACb,+BACI,4BACI,wBAAIC,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,YAGR,+BAEQF,EAASG,KAAI,SAACC,EAASC,GACnB,OACI,wBAAIC,IAAKD,GACL,4BAAKD,EAAQG,OACb,4BAAKH,EAAQI,MACb,4BAAKJ,EAAQK,OACb,4BAAKL,EAAQM,gBCPlCC,EAZF,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,WAAYC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,QACpC,OACI,6BACI,0BAAMb,UAAU,cACZ,sDACA,2BAAOA,UAAU,kBAAkBc,KAAK,OAAOC,YAAY,aAAaC,SAAUL,KAEtF,4BAAQX,UAAU,sCAAsCc,KAAK,SAASG,GAAI,SAAUC,QAASN,GAA7F,YACA,4BAAQZ,UAAU,sCAAsCc,KAAK,SAASG,GAAI,UAAWC,QAASL,GAA9F,gBC4DGM,MAhEf,WAAgB,IAAD,EAEWC,mBAAS,CAAEC,KAAM,KAF5B,mBAENA,EAFM,KAEAC,EAFA,OAGmBF,mBAAS,IAH5B,mBAGNrB,EAHM,KAGIwB,EAHJ,OAI2BH,mBAAS,IAJpC,mBAINI,EAJM,KAIQC,EAJR,KAqBbC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAY,WAChB,IAAIC,EACJA,EAAWC,EAASC,QAAQ5B,KAAI,SAACC,GAC/B,MAAO,CAAEG,MAAOH,EAAQkB,KAAKf,MAAOC,KAAMJ,EAAQkB,KAAKd,KAAMC,MAAOL,EAAQK,MAAOC,OAAQN,EAAQM,WAClGsB,MAAM,EAAG,KACZR,EAAYK,GACZH,EAAgBG,IAoBlB,OACE,yBAAK5B,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,uBACb,wBAAIA,UAAU,yDAAd,gCACA,kBAAC,EAAD,CAAMW,WA/CK,SAACqB,GAClBV,EAAQ,CAAED,KAAMW,EAAEC,OAAOC,QAEzB,IADA,IAAIC,EAAc,GACT/B,EAAQ,EAAGA,EAAQoB,EAAaY,OAAQhC,IAC3CoB,EAAapB,GAAOE,MAAM+B,cAAcC,WAAWN,EAAEC,OAAOC,MAAMG,gBACpEF,EAAYI,KAAKf,EAAapB,IAGlCmB,EAAYY,GACZd,EAAKA,KAAO,IAsCwBT,WAvBnB,SAACoB,GAClBA,EAAEQ,iBACFhB,EAAaiB,MAAK,SAAUC,EAAGC,GAC7B,OAAID,EAAEpC,MAAQqC,EAAErC,OAAiB,EAC7BoC,EAAEpC,MAAQqC,EAAErC,MAAgB,EACzB,KAET,IAAMsC,EAAO,YAAOpB,GACpBD,EAAYqB,IAegD/B,QAZ9C,SAACmB,GACfA,EAAEQ,iBACEhB,EAAaY,OAAS,GACxBb,EAAYC,MAUR,kBAAC,EAAD,CAAUzB,SAAUA,QCnDV8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f4986041.chunk.js","sourcesContent":["import React from 'react';\r\nconst Employee = ({ employee }) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <table className=\"table table-borderless table-dark\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">First</th>\r\n                        <th scope=\"col\">Last</th>\r\n                        <th scope=\"col\">Email</th>\r\n                        <th scope=\"col\">Gender</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        employee.map((element, index) => {\r\n                            return (\r\n                                <tr key={index}>\r\n                                    <td>{element.first}</td>\r\n                                    <td>{element.last}</td>\r\n                                    <td>{element.email}</td>\r\n                                    <td>{element.gender}</td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                </tbody>\r\n            </table>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Employee;\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nconst Form = ({ modifyName, submitName, showAll }) => {\r\n    return (\r\n        <div>\r\n            <form className=\"form-group\" >\r\n                <label>Look For Employee: </label>\r\n                <input className=\"form-group ml-3\" type=\"text\" placeholder=\"Enter Name\" onChange={modifyName} />\r\n            </form>\r\n            <button className=\"btn btn-primary ml-3 mb-3 rounded-0\" type=\"submit\" id={\"search\"} onClick={submitName} >Sort A-Z</button>\r\n            <button className=\"btn btn-primary ml-3 mb-3 rounded-0\" type=\"submit\" id={\"showAll\"} onClick={showAll} >Show Table</button>\r\n        </div>\r\n    )\r\n}\r\nexport default Form\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport jsonData from './client.json'\nimport Employee from './component/Employee/Employee';\nimport Form from './component/Form/Form';\n\nfunction App() {\n\n  const [name, setName] = useState({ name: '' });\n  const [employee, setEmployee] = useState([]);\n  const [allEmployees, setALlEmployees] = useState([]);\n\n\n\n\n  const modifyName = (e) => {\n    setName({ name: e.target.value });\n    let filteredEmp = [];\n    for (let index = 0; index < allEmployees.length; index++) {\n      if (allEmployees[index].first.toLowerCase().startsWith(e.target.value.toLowerCase())) {\n        filteredEmp.push(allEmployees[index])\n      }\n    }\n    setEmployee(filteredEmp);\n    name.name = \"\";\n  }\n\n  useEffect(() => {\n    tableData();\n  }, [])\n\n  const tableData = () => {\n    let arrayAll;\n    arrayAll = jsonData.results.map((element) => {\n      return { first: element.name.first, last: element.name.last, email: element.email, gender: element.gender };\n    }).slice(0, 100);\n    setEmployee(arrayAll);\n    setALlEmployees(arrayAll)\n  }\n  const submitName = (e) => {\n    e.preventDefault();\n    allEmployees.sort(function (a, b) {\n      if (a.first < b.first) { return -1; }\n      if (a.first > b.first) { return 1; }\n      return 0;\n    })\n    const newTemp = [...allEmployees];\n    setEmployee(newTemp);\n\n  }\n  const showAll = (e) => {\n    e.preventDefault();\n    if (allEmployees.length > 0) {\n      setEmployee(allEmployees);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"jumbotron rounded-0\">\n          <h1 className=\"text-center mb-3 text-monospace bg-success text-white\">Welcome To Employee Director</h1>\n          <Form modifyName={modifyName} submitName={submitName} showAll={showAll} />\n          <Employee employee={employee} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}